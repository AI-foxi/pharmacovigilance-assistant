# modules/expectedness_checker.py
import json
import os

class ExpectednessChecker:
    def __init__(self):
        self.smpc_database = self._load_smpc_database()
    
    def _load_smpc_database(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º"""
        try:
            with open('knowledge/smpc_database.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ö†Ô∏è –§–∞–π–ª –±–∞–∑—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}
    
    def extract_drug_name(self, text):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
        """
        text_lower = text.lower()
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
        for drug_name in self.smpc_database.keys():
            if drug_name.lower() in text_lower:
                return drug_name
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–ºÊúÄÂ∏∏ËßÅÁöÑ –ø—Ä–µ–ø–∞—Ä–∞—Ç
        return "–ü—Ä–µ–ø–∞—Ä–∞—Ç –ê"
    
    def check_expectedness(self, text, adverse_event):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
        """
        drug_name = self.extract_drug_name(text)
        
        if drug_name not in self.smpc_database:
            return {
                'is_expected': False,
                'reason': f"–ü—Ä–µ–ø–∞—Ä–∞—Ç '{drug_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
                'drug': drug_name
            }
        
        drug_info = self.smpc_database[drug_name]
        adverse_event_lower = adverse_event.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for expected_effect, effect_info in drug_info['expected_effects'].items():
            if expected_effect.lower() == adverse_event_lower:
                return {
                    'is_expected': True,
                    'reason': f"–ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≤ –ò–ú–ü",
                    'drug': drug_name,
                    'effect_type': effect_info['type'],
                    'frequency': effect_info['frequency']
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å–∏–º–ø—Ç–æ–º–æ–∫–æ–º–ø–ª–µ–∫—Å
        for expected_effect, effect_info in drug_info['expected_effects'].items():
            if effect_info['type'] == 'symptom_complex':
                if adverse_event_lower in [symptom.lower() for symptom in effect_info.get('includes', [])]:
                    return {
                        'is_expected': True,
                        'reason': f"–í—Ö–æ–¥–∏—Ç –≤ —Å–∏–º–ø—Ç–æ–º–æ–∫–æ–º–ø–ª–µ–∫—Å '{expected_effect}'",
                        'drug': drug_name,
                        'effect_type': effect_info['type'],
                        'frequency': effect_info['frequency'],
                        'parent_complex': expected_effect
                    }
        
        return {
            'is_expected': False,
            'reason': "–ù–µ –æ–ø–∏—Å–∞–Ω–æ –≤ –ò–ú–ü",
            'drug': drug_name
        }
    
    def get_available_drugs(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –≤ –±–∞–∑–µ"""
        return list(self.smpc_database.keys())

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    checker = ExpectednessChecker()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("=" * 50)
    
    test_cases = [
        {
            "text": "–ü–∞—Ü–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–ª –ü—Ä–µ–ø–∞—Ä–∞—Ç –ê, –ø–æ—è–≤–∏–ª–∞—Å—å –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å",
            "event": "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"
        },
        {
            "text": "–ü–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞ –ü—Ä–µ–ø–∞—Ä–∞—Ç–∞ –ë –≤–æ–∑–Ω–∏–∫–ª–∞ —Å—ã–ø—å –Ω–∞ –∫–æ–∂–µ", 
            "event": "—Å—ã–ø—å"
        },
        {
            "text": "–ù–∞ —Ñ–æ–Ω–µ –ª–µ—á–µ–Ω–∏—è –ü—Ä–µ–ø–∞—Ä–∞—Ç–æ–º –ê –æ—Ç–º–µ—á–∞–ª—Å—è –∑—É–¥",
            "event": "–∑—É–¥"
        },
        {
            "text": "–ü—Ä–∏–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤—ã–∑–≤–∞–ª –±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ",
            "event": "–±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        result = checker.check_expectedness(test_case["text"], test_case["event"])
        status = "üü¢ –ü–†–ï–î–í–ò–î–ï–ù–ù–´–ô" if result['is_expected'] else "üî¥ –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–´–ô"
        
        print(f"\n–¢–µ—Å—Ç {i}: {status}")
        print(f"–ü—Ä–µ–ø–∞—Ä–∞—Ç: {result['drug']}")
        print(f"–°–æ–±—ã—Ç–∏–µ: {test_case['event']}")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
        if 'frequency' in result:
            print(f"–ß–∞—Å—Ç–æ—Ç–∞: {result['frequency']}")
