# modules/causality_checker.py
import re
from datetime import datetime

class CausalityChecker:
    def analyze_causality(self, text, adverse_event):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—É—é —Å–≤—è–∑—å –ø–æ —à–∫–∞–ª–µ –í–û–ó
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {'level': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è/–í–µ—Ä–æ—è—Ç–Ω–∞—è/...', 'reasoning': '–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ'}
        """
        text_lower = text.lower()
        event_lower = adverse_event.lower()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        facts = self._extract_facts(text_lower, event_lower)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –í–û–ó
        causality_level = self._apply_who_algorithm(facts)
        
        return {
            'level': causality_level,
            'reasoning': self._generate_reasoning(causality_level, facts),
            'facts': facts
        }
    
    def _extract_facts(self, text, event):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏"""
        facts = {
            'time_relationship': self._check_time_relationship(text),
            'dechallenge': self._check_dechallenge(text, event),
            'rechallenge': self._check_rechallenge(text),
            'alternative_causes': self._check_alternative_causes(text),
            'known_effect': self._check_known_effect(text, event),
            'drug_mentioned': self._check_drug_mention(text)
        }
        return facts
    
    def _check_time_relationship(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑—å"""
        time_patterns = [
            r'—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å|–¥–µ–Ω—å|–Ω–µ–¥–µ–ª)',
            r'–ø–æ—Å–ª–µ\s+–ø—Ä–∏–µ–º–∞',
            r'–Ω–∞\s+—Ñ–æ–Ω–µ\s+–ª–µ—á–µ–Ω–∏—è',
            r'–ø—Ä–∏\s+–ø—Ä–∏–µ–º–µ'
        ]
        
        for pattern in time_patterns:
            if re.search(pattern, text):
                return "–µ—Å—Ç—å"
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    def _check_dechallenge(self, text, event):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"""
        improvement_terms = [
            '—É–ª—É—á—à–µ–Ω–∏–µ', '–∏—Å—á–µ–∑–ª–∏', '–ø—Ä–æ—à–ª–∏', '–∫—É–ø–∏—Ä–æ–≤–∞', '–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞',
            '—Ä–µ–≥—Ä–µ—Å—Å', '–ø—Ä–µ–∫—Ä–∞—Ç–∏–ª', '–≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª'
        ]
        
        withdrawal_terms = ['–æ—Ç–º–µ–Ω', '–ø—Ä–µ–∫—Ä–∞—Ç–∏–ª', '–ø–µ—Ä–µ—Å—Ç–∞–ª']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        has_withdrawal = any(term in text for term in withdrawal_terms)
        has_improvement = any(term in text for term in improvement_terms)
        
        if has_withdrawal and has_improvement:
            return "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è"
        elif has_withdrawal and not has_improvement:
            return "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
        else:
            return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    def _check_rechallenge(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏"""
        rechallenge_terms = [
            '–ø–æ–≤—Ç–æ—Ä–Ω–æ', '—Å–Ω–æ–≤–∞', '—Ä–µ—Ü–∏–¥–∏–≤', '–≤–æ–∑–æ–±–Ω–æ–≤–∏–ª'
        ]
        
        if any(term in text for term in rechallenge_terms):
            return "–µ—Å—Ç—å"
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    def _check_alternative_causes(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã"""
        alternative_patterns = [
            r'–Ω–∞\s+—Ñ–æ–Ω–µ\s+([–∞-—è]+)\s+–∑–∞–±–æ–ª–µ–≤–∞–Ω',  # –Ω–∞ —Ñ–æ–Ω–µ –¥—Ä—É–≥–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            r'—Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â',  # —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            r'–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\s+–ø—Ä–∏–Ω–∏–º–∞–ª',  # –¥—Ä—É–≥–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
            r'–≤\s+–∞–Ω–∞–º–Ω–µ–∑–µ'  # –∏—Å—Ç–æ—Ä–∏—è –±–æ–ª–µ–∑–Ω–∏
        ]
        
        for pattern in alternative_patterns:
            if re.search(pattern, text):
                return "–µ—Å—Ç—å"
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    def _check_known_effect(self, text, event):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        known_effects = [
            '–∞–ª–ª–µ—Ä–≥–∏', '–∞–Ω–∞—Ñ–∏–ª–∞–∫—Å–∏—è', '—Å—ã–ø—å', '—Ç–æ—à–Ω–æ—Ç–∞', '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å',
            '–∫—Ä–∞–ø–∏–≤–Ω–∏—Ü–∞', '–∑—É–¥', '–æ—Ç–µ–∫', '—Ä–≤–æ—Ç–∞', '–¥–∏–∞—Ä–µ—è'
        ]
        
        if any(effect in event for effect in known_effects):
            return "–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    def _check_drug_mention(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"""
        drug_patterns = [
            r'–ø—Ä–µ–ø–∞—Ä–∞—Ç', r'–ª–µ–∫–∞—Ä—Å—Ç–≤', r'—Ç–∞–±–ª–µ—Ç', r'–∫–∞–ø—Å—É–ª', r'–∏–Ω—ä–µ–∫—Ü'
        ]
        
        if any(pattern in text for pattern in drug_patterns):
            return "–µ—Å—Ç—å"
        return "–Ω–µ—Ç"
    
    def _apply_who_algorithm(self, facts):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∫–∏ –ø–æ —à–∫–∞–ª–µ –í–û–ó"""
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è
        if (facts['time_relationship'] == "–µ—Å—Ç—å" and
            facts['rechallenge'] == "–µ—Å—Ç—å" and
            facts['dechallenge'] == "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" and
            facts['alternative_causes'] == "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"):
            return "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è"
        
        # –í–µ—Ä–æ—è—Ç–Ω–∞—è
        elif (facts['time_relationship'] == "–µ—Å—Ç—å" and
              facts['dechallenge'] == "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" and
              facts['alternative_causes'] == "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"):
            return "–í–µ—Ä–æ—è—Ç–Ω–∞—è"
        
        # –í–æ–∑–º–æ–∂–Ω–∞—è
        elif (facts['time_relationship'] == "–µ—Å—Ç—å" and
              facts['alternative_causes'] == "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"):
            return "–í–æ–∑–º–æ–∂–Ω–∞—è"
        
        # –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è
        elif (facts['time_relationship'] == "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" or
              facts['alternative_causes'] == "–µ—Å—Ç—å"):
            return "–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è"
        
        # –£—Å–ª–æ–≤–Ω–∞—è
        elif facts['drug_mentioned'] == "–Ω–µ—Ç":
            return "–£—Å–ª–æ–≤–Ω–∞—è"
        
        else:
            return "–ù–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–∞—è"
    
    def _generate_reasoning(self, level, facts):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"""
        reasoning_templates = {
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è": "–ß–µ—Ç–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–≤—è–∑—å, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω—ã.",
            "–í–µ—Ä–æ—è—Ç–Ω–∞—è": "–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∞—Ü–∏—è. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã.",
            "–í–æ–∑–º–æ–∂–Ω–∞—è": "–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–≤—è–∑—å –∏–º–µ–µ—Ç—Å—è, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.",
            "–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–µ—Ç–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–≤—è–∑—å –∏–ª–∏ –∏–º–µ—é—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã.",
            "–£—Å–ª–æ–≤–Ω–∞—è": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏.",
            "–ù–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–∞—è": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏."
        }
        
        return reasoning_templates.get(level, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Å–≤—è–∑—å.")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    checker = CausalityChecker()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç–∏:")
    print("=" * 50)
    
    test_cases = [
        "–ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –æ—Ç–º–µ—Ç–∏–ª –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å—ã–ø–∏. –ü—Ä–µ–ø–∞—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω, —Å—ã–ø—å –∏—Å—á–µ–∑–ª–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏.",
        "–ù–∞ —Ñ–æ–Ω–µ –ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–≤–∏–ª–∞—Å—å —Ç–æ—à–Ω–æ—Ç–∞. –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–ª –¥—Ä—É–≥–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã.",
        "–ü–∞—Ü–∏–µ–Ω—Ç —Å–∫–æ–Ω—á–∞–ª—Å—è. –ü—Ä–∏—á–∏–Ω–∞ —Å–º–µ—Ä—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
    ]
    
    for i, case in enumerate(test_cases, 1):
        result = checker.analyze_causality(case, "—Å—ã–ø—å")
        print(f"\n–¢–µ—Å—Ç {i}: {result['level']}")
        print(f"–¢–µ–∫—Å—Ç: {case}")
        print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result['reasoning']}")
